// Code generated by generate. DO NOT EDIT.
package sqlx

import (
	sqlc "crud/db/sqlc"
)


var (
	AuthorAllowedFields = map[string]struct{}{ "id": {} , "name": {} , "bio": {}  }
	AuthorColumns = []string{ "id", "name", "bio" }
)

type Author struct { sqlc.Author }

func (m Author) TableName() string { return "authors" }
func (m Author) Columns() []string { return AuthorColumns }
func (m Author) GetAllowedFieldsForFilter() map[string]struct{} { return AuthorAllowedFields }
func (m Author) GetId() int64 { return m.Author.ID }

type AuthorUpdate struct {
	Id int64 `db:"id" json:"id" param:"id" query:"id" form:"id"`
	Name *string `db:"name" json:"name,omitempty" param:"name" query:"name" form:"name"`
	Bio *string `db:"bio" json:"bio,omitempty" param:"bio" query:"bio" form:"bio"`
}

func (m AuthorUpdate) TableName() string { return "authors" }
func (m AuthorUpdate) Columns() []string { return AuthorColumns }
func (m AuthorUpdate) GetId() int64 { return m.Id }


var (
	BookAllowedFields = map[string]struct{}{ "id": {} , "title": {} , "author_id": {}  }
	BookColumns = []string{ "id", "title", "author_id" }
)

type Book struct { sqlc.Book }

func (m Book) TableName() string { return "books" }
func (m Book) Columns() []string { return BookColumns }
func (m Book) GetAllowedFieldsForFilter() map[string]struct{} { return BookAllowedFields }
func (m Book) GetId() int64 { return m.Book.ID }

type BookUpdate struct {
	Id int64 `db:"id" json:"id" param:"id" query:"id" form:"id"`
	Title *string `db:"title" json:"title,omitempty" param:"title" query:"title" form:"title"`
	AuthorID *int64 `db:"author_id" json:"author_id,omitempty" param:"author_id" query:"author_id" form:"author_id"`
}

func (m BookUpdate) TableName() string { return "books" }
func (m BookUpdate) Columns() []string { return BookColumns }
func (m BookUpdate) GetId() int64 { return m.Id }


