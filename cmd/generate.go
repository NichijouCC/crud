package main

import (
	"bufio"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

func getModuleName() string {
	file, err := os.Open("go.mod")
	if err != nil {
		panic(err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	if scanner.Scan() {
		line := scanner.Text()
		if strings.HasPrefix(line, "module ") {
			return strings.TrimSpace(strings.TrimPrefix(line, "module "))
		}
	}
	panic("module name not found in go.mod")
}

const extendStructTpl = `// Code generated by generate. DO NOT EDIT.
package sqlx

import (
	sqlc "{{.ModuleName}}/db/sqlc"
)

{{range .Structs}}
var (
	{{.Name}}AllowedFields = map[string]struct{}{ {{range $i, $e := .ColumnList}}{{if $i}}, {{end}}{{$e}}: {} {{end}} }
	{{.Name}}Columns = []string{ {{range $i, $e := .ColumnList}}{{if $i}}, {{end}}{{$e}}{{end}} }
)

type {{.Name}} struct { sqlc.{{.Name}} }

func (m {{.Name}}) TableName() string { return "{{.TableName}}" }
func (m {{.Name}}) Columns() []string { return {{.Name}}Columns }
func (m {{.Name}}) GetAllowedFieldsForFilter() map[string]struct{} { return {{.Name}}AllowedFields }
func (m {{.Name}}) GetId() int64 { return m.{{.Name}}.ID }

type {{.Name}}Update struct {
	Id int64 ` + "`" + `db:"id" json:"id" param:"id" query:"id" form:"id"` + "`" + `
	{{- range .Fields -}}
	{{- if ne .DBName "id"}}
	{{.Name}} *{{.Type}} ` + "`" + `db:"{{.DBName}}" json:"{{.JSONName}},omitempty" param:"{{.DBName}}" query:"{{.DBName}}" form:"{{.DBName}}"` + "`" + `
	{{- end -}}
	{{- end}}
}

func (m {{.Name}}Update) TableName() string { return "{{.TableName}}" }
func (m {{.Name}}Update) Columns() []string { return {{.Name}}Columns }
func (m {{.Name}}Update) GetId() int64 { return m.Id }

{{end}}
`

type FieldInfo struct {
	Name     string
	Type     string
	DBName   string
	JSONName string
}

type StructInfo struct {
	Name       string
	TableName  string
	Columns    string
	ColumnList []string
	Fields     []FieldInfo
}

type TemplateData struct {
	ModuleName string
	Structs    []StructInfo
}

func getFieldType(expr ast.Expr) string {
	switch t := expr.(type) {
	case *ast.SelectorExpr:
		if ident, ok := t.X.(*ast.Ident); ok {
			if ident.Name == "sql" {
				switch t.Sel.Name {
				case "NullString":
					return "string"
				case "NullInt64":
					return "int64"
				case "NullFloat64":
					return "float64"
				case "NullBool":
					return "bool"
				case "NullTime":
					return "time.Time"
				default:
					return "sql." + t.Sel.Name
				}
			}
			return fmt.Sprintf("%s.%s", ident.Name, t.Sel.Name)
		}
	case *ast.Ident:
		return t.Name
	}
	return fmt.Sprintf("%v", expr)
}

func main() {
	// 获取模块名
	moduleName := getModuleName()

	// 解析models.go文件
	fset := token.NewFileSet()
	f, err := parser.ParseFile(fset, "./db/sqlc/models.go", nil, parser.ParseComments)
	if err != nil {
		panic(err)
	}

	var structs []StructInfo

	// 遍历所有结构体
	for _, decl := range f.Decls {
		genDecl, ok := decl.(*ast.GenDecl)
		if !ok {
			continue
		}

		for _, spec := range genDecl.Specs {
			typeSpec, ok := spec.(*ast.TypeSpec)
			if !ok {
				continue
			}

			structType, ok := typeSpec.Type.(*ast.StructType)
			if !ok {
				continue
			}

			// 获取结构体信息
			info := StructInfo{
				Name:      typeSpec.Name.Name,
				TableName: strings.ToLower(typeSpec.Name.Name) + "s", // 简单处理表名
			}

			// 获取字段名
			var columns []string
			for _, field := range structType.Fields.List {
				tag := field.Tag.Value
				if strings.Contains(tag, "db:") {
					dbTag := strings.Split(strings.Split(tag, "db:\"")[1], "\"")[0]
					columns = append(columns, fmt.Sprintf("\"%s\"", dbTag))
				}
			}
			info.Columns = strings.Join(columns, ", ")
			info.ColumnList = columns

			// 获取字段信息
			var fields []FieldInfo
			for _, field := range structType.Fields.List {
				tag := field.Tag.Value
				if strings.Contains(tag, "db:") {
					dbTag := strings.Split(strings.Split(tag, "db:\"")[1], "\"")[0]
					jsonTag := ""
					if strings.Contains(tag, "json:") {
						jsonTag = strings.Split(strings.Split(tag, "json:\"")[1], "\"")[0]
					}
					fields = append(fields, FieldInfo{
						Name:     field.Names[0].Name,
						Type:     getFieldType(field.Type),
						DBName:   dbTag,
						JSONName: jsonTag,
					})
				}
			}
			info.Fields = fields

			structs = append(structs, info)
		}
	}

	// 生成扩展结构体文件
	tpl := template.Must(template.New("extend").Parse(extendStructTpl))

	outDir := "./db/sqlx"
	if err := os.MkdirAll(outDir, 0755); err != nil {
		panic(err)
	}

	outFile := filepath.Join(outDir, "models_info.go")
	outFileHandle, err := os.Create(outFile)
	if err != nil {
		panic(err)
	}
	defer outFileHandle.Close()

	data := TemplateData{
		ModuleName: moduleName,
		Structs:    structs,
	}

	if err := tpl.Execute(outFileHandle, data); err != nil {
		panic(err)
	}
}
